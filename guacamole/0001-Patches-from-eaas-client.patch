From 2091eec21fa82ecddff90489a06fc8307a303cc8 Mon Sep 17 00:00:00 2001
From: Rafael Gieschke <rafael@gieschke.de>
Date: Thu, 25 Feb 2021 11:35:30 +0100
Subject: [PATCH] Patches from eaas-client

Source: <https://gitlab.com/emulation-as-a-service/eaas-client/-/commit/17a5674b4c50b94db7358b1bf72dafef1449cd98>,
<https://gitlab.com/emulation-as-a-service/eaas-client/-/commit/0ce0997538471d540dc1ec6bfd84542a539c915a>, and previous commits
---
 .../src/main/webapp/modules/AudioChannel.js   |  4 +-
 .../src/main/webapp/modules/Mouse.js          | 42 +++++++++++++++++--
 .../src/main/webapp/modules/Tunnel.js         | 22 +++++++---
 3 files changed, 56 insertions(+), 12 deletions(-)

diff --git a/guacamole-common-js/src/main/webapp/modules/AudioChannel.js b/guacamole-common-js/src/main/webapp/modules/AudioChannel.js
index 3eb1dca86..812ee82e9 100644
--- a/guacamole-common-js/src/main/webapp/modules/AudioChannel.js
+++ b/guacamole-common-js/src/main/webapp/modules/AudioChannel.js
@@ -70,8 +70,8 @@ Guacamole.AudioChannel = function() {
 };
 
 // Define context if available
-if (window.webkitAudioContext) {
-    Guacamole.AudioChannel.context = new webkitAudioContext();
+if (window.webkitAudioContext || window.AudioContext) {
+    Guacamole.AudioChannel.context = new (window.AudioContext || window.webkitAudioContext)();
 }
 
 /**
diff --git a/guacamole-common-js/src/main/webapp/modules/Mouse.js b/guacamole-common-js/src/main/webapp/modules/Mouse.js
index e3487a77e..e1e806108 100644
--- a/guacamole-common-js/src/main/webapp/modules/Mouse.js
+++ b/guacamole-common-js/src/main/webapp/modules/Mouse.js
@@ -143,10 +143,25 @@ Guacamole.Mouse = function(element) {
             return;
         }
 
-        guac_mouse.currentState.fromClientPosition(element, e.clientX, e.clientY);
-
-        if (guac_mouse.onmousemove)
-            guac_mouse.onmousemove(guac_mouse.currentState);
+        if (element.isRelativeMouse == true) {
+        	if (element.isPointerLockEnabled) {
+            	// PointerLock: relative mouse coordinates arriving
+                var movementX = e.movementX || e.mozMovementX || e.webkitMovementX || 0;
+                var movementY = e.movementY || e.mozMovementY || e.webkitMovementY || 0;
+                guac_mouse.currentState.fromClientPositionPointerLocked(element, movementX, movementY);
+                if (guac_mouse.onmousemove)
+                    guac_mouse.onmousemove(guac_mouse.currentState);
+            }
+        	else {
+        		// PointerLock disabled: ignore this event!
+        	}
+        }
+        else {
+            // Absolute mouse coordinates arriving
+            guac_mouse.currentState.fromClientPosition(element, e.clientX, e.clientY);
+            if (guac_mouse.onmousemove)
+                guac_mouse.onmousemove(guac_mouse.currentState);
+        }
 
     }, false);
 
@@ -170,6 +185,11 @@ Guacamole.Mouse = function(element) {
                 break;
         }
 
+        if (element.isRelativeMouse == true && element.isPointerLockEnabled) {
+           	// PointerLock: reset last mouse movement
+       		guac_mouse.currentState.fromClientPositionPointerLocked(element, 0, 0);
+        }
+
         if (guac_mouse.onmousedown)
             guac_mouse.onmousedown(guac_mouse.currentState);
 
@@ -484,6 +504,20 @@ Guacamole.Mouse.State = function(x, y, left, middle, right, up, down) {
 
     };
 
+    /**
+     * Updates the position represented within this state object by relative mouse
+     * coordinates, commonly available if the browser supports the PointerLock API.
+     * 
+     * @param {Number} movementX Relative X movement
+     * @param {Number} movementY Relative Y movement
+     */
+    this.fromClientPositionPointerLocked = function(element, movementX, movementY) {
+    	// Shift relative movement by the element's size, since the coordinates
+    	// must be positive in some underlying remote-desktop protocols!
+        guac_state.x = element.offsetWidth + movementX;
+        guac_state.y = element.offsetHeight + movementY;
+    };
+    
 };
 
 /**
diff --git a/guacamole-common-js/src/main/webapp/modules/Tunnel.js b/guacamole-common-js/src/main/webapp/modules/Tunnel.js
index 8954c5245..4af4a3bd3 100644
--- a/guacamole-common-js/src/main/webapp/modules/Tunnel.js
+++ b/guacamole-common-js/src/main/webapp/modules/Tunnel.js
@@ -157,11 +157,15 @@ Guacamole.HTTPTunnel = function(tunnelURL) {
     var POLLING_DISABLED    = 0;
 
     // Default to polling - will be turned off automatically if not needed
-    var pollingMode = POLLING_ENABLED;
+    // HACK: Detecting whether polling is required seems to not really work
+    // (and polling is not needed in any browsers anymore anyway).
+    var pollingMode = POLLING_DISABLED;
 
     var sendingMessages = false;
     var outputMessageBuffer = "";
 
+    var begin_timestamp = 0;
+    
     /**
      * The current receive timeout ID, if any.
      * @private
@@ -244,15 +248,16 @@ Guacamole.HTTPTunnel = function(tunnelURL) {
         }
 
         // Initialized message with first element
-        var message = getElement(arguments[0]);
+        var relative_timestamp = (performance.now() - begin_timestamp) | 0;
+        var message = getElement(relative_timestamp);
 
         // Append remaining elements
-        for (var i=1; i<arguments.length; i++)
+        for (var i=0; i<arguments.length; i++)
             message += "," + getElement(arguments[i]);
 
         // Final terminator
         message += ";";
-
+        
         // Add message to buffer
         outputMessageBuffer += message;
 
@@ -264,9 +269,12 @@ Guacamole.HTTPTunnel = function(tunnelURL) {
 
     function sendPendingMessages() {
 
+        // NOTE: Comment out the state check, to flush all
+        //       pending messages after disconnect() call!
+
         // Do not attempt to send messages if not connected
-        if (tunnel.state !== Guacamole.Tunnel.State.OPEN)
-            return;
+        //if (tunnel.state !== Guacamole.Tunnel.State.OPEN)
+        //    return;
 
         if (outputMessageBuffer.length > 0) {
 
@@ -546,6 +554,8 @@ Guacamole.HTTPTunnel = function(tunnelURL) {
         connect_xmlhttprequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
         connect_xmlhttprequest.send(data);
 
+        // Remember the begin of this session
+        begin_timestamp = performance.now();
     };
 
     this.disconnect = function() {
-- 
2.25.1

